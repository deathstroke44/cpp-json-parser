PROCESS-RESULT():
    result = AppendResultsByCommaSeparators()
    if multipleResultQuery
        result = "[" + result + "]"
    return result

UPDATE-RESULT(streamToken, key):
    resultUpToNowForThisKey = jsonPathQueryResultKeys.get(key)
    lastAddedToken = jsonPathQueryResultsLastAddedTokenMap.get(key)
    if appendingDelimiterNeeded(streamToken, lastAddedToken)
        resultUpToNowForThisKey.append(",")
    resultUpToNowForThisKey.append(getProcessedValue(streamToken))
    jsonPathQueryResultKeys.set(key,resultUpToNowForThisKey)
    jsonPathQueryResultsLastAddedTokenMap.set(key,streamToken)

UPDATE-RESULT-IF-NEEDED(streamToken, ignoreEventFlag, shouldAddThisEvent, previousKeySatisfy, previousKey):
    currentKeySatisfy = isCurrentJsonPathMatchJsonPathQuery()
    if currentKeyMatched and not ignoreEventFlag
        currentKey = getCurrentJsonPathUptoQueryLength()
        UPDATE-RESULT(streamToken, currentKey)
    else if (not currentKeySatisfy and shouldAddThisEvent and previousKeySatisfy)
        UPDATE-RESULT(streamToken, previousKey)

PROCESS-STREAM-TOKEN-AND-UPDATE-STATES(streamToken, shouldAddThisEvent, ignoreEventFlag)
    if streamToken.type == KEY_TOKEN
        ignoreEventFlag = ignoreEventFlag or !currentJsonPathMatchJsonPathQuery()
        currentJsonPathStack.push({isStringKey:true, key: streamToken.value})
    else if streamToken.type == VALUE_TOKEN
        if PartOfObject:
            shouldAddThisEvent = isCurrentJsonPathMatchJsonPathQuery()
            currentJsonPathStack.pop()
        else if PartOfList: currentJsonPathStack.top().index++
    else if streamToken.type == LIST_STARTED_TOKEN
        if PartOfList: currentJsonPathStack.top().index++
        currentJsonPathStack.push({isStringKey=false,index=-1})
        traversingListOrObjectStack.push("list")
    else if streamToken.type == LIST_ENDED_TOKEN
        currentJsonPathStack.pop()
        if PartOfObject
            shouldAddThisEvent=isCurrentJsonPathMatchJsonPathQuery();
            currentJsonPathStack.pop()
    else if streamToken.type == OBJECT_STARTED_TOKEN
        if PartOfList: currentJsonPathStack.top().index++
        traversingListOrObjectStack.push("object")
    else if streamToken.type == OBJECT_ENDED_TOKEN
        shouldAddThisEvent=isCurrentJsonPathMatchJsonPathQuery();
        traversingListOrObjectStack.pop()
        if PartOfObject
            currentJsonPathStack.pop()

HANDLE-EVENT(streamToken):
    if streamToken.tokenType == DOCUMENT_END:
        PROCESS-RESULT()
        return
    shouldAddThisEvent = ignoreEventFlag = false
    previousKeySatisfy = isCurrentJsonPathMatchJsonPathQuery()
    PROCESS-STREAM-TOKEN-AND-UPDATE-STATES(streamToken, shouldAddThisEvent, ignoreEventFlag)
    UPDATE-RESULT-IF-NEEDED(streamToken, ignoreEventFlag, shouldAddThisEvent, previousKeySatisfy, previousKey)